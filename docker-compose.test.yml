---
# TEST compose file for continuous services.
version: "3.8"
services:
  # Database for local development
  db:
    image: postgis/postgis:13-3.1-alpine
    restart: unless-stopped
    env_file: .env
    ports:
      - 127.0.0.1:${POSTGRES_HOST_PORT}:5432
    volumes:
      - ./db/sql:/docker-entrypoint-initdb.d:ro
      # Change to an actual import volume for production:
      - ./testdata/import:/import:ro
      # Persistent storage
      - ./analytics-postgis-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-q", "-U", "${POSTGRES_USER}"]
      interval: 5s
      start_period: 5s
      timeout: 20s
      retries: 3
  api:
    image: hfp-analytics/api:latest
    build:
      context: ./python
      dockerfile: Dockerfile.api
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "127.0.0.1:7071:80"
    env_file: .env
    environment:
      - PYTHONUNBUFFERED=1
    volumes:
      - ./python/api:/home/site/wwwroot/api/:ro
      - ./python/common:/home/site/wwwroot/common/:ro
      - ./python/host.json:/home/site/wwwroot/host.json:ro
      - ./python/requirements.txt:/home/site/wwwroot/requirements.txt:ro
    restart: on-failure
  importer:
    image: hfp-analytics/importer:latest
    build:
      context: ./python
      dockerfile: Dockerfile.importer
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "127.0.0.1:7072:80"
    env_file: .env
    environment:
      - PYTHONUNBUFFERED=1
    volumes:
      - ./python/importer:/home/site/wwwroot/importer/:ro
      - ./python/common:/home/site/wwwroot/common/:ro
      - ./python/host.json:/home/site/wwwroot/host.json:ro
      - ./python/requirements.txt:/home/site/wwwroot/requirements.txt:ro
    restart: on-failure
  #worker:
  #  image: stopcorr/stopcorr-python:latest
  #  build: ./python
  #  depends_on:
  #    db:
  #      condition: service_healthy
  #  restart: "no"
  #  env_file: .env
  #  volumes:
  #    - ./python/src:/code:ro
  #    - ./qgis/out:/qgis/out:ro
  #    - ./results:/results
  #  command: python -c "print('worker OK')"
  #fileserver:
  #  image: stopcorr/stopcorr-python:latest
  #  restart: unless-stopped
  #  env_file: .env
  #  ports:
  #    - ${FILESERVER_HOST_PORT}:8080
  #  volumes:
  #    - ./results:/results:ro
  #  command: python -m http.server 8080 --directory /results

networks:
  default:
    external: true
    name: hfp_analytics_nw
